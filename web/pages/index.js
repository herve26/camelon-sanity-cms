import Head from 'next/head'
import Image from 'next/image'
import client from '../client';
import groq from 'groq';

import Header from '#Organisms/Header';
import Main from '#Organisms/Main';
import Footer from '#Organisms/Footer';

export default function Home({hero, sections, navigation, config, translation}) {
  return (
    <div>
      <Head>
        <title>{config.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
        <link href="https://fonts.googleapis.com/css2?family=Playfair+Display&family=Roboto&display=swap" rel="stylesheet"/>
      </Head>
      <Header
        hero={hero}
        navigation={navigation}
        logo={config.logo}
      />
      <Main sections={sections} translation={translation}/>
      <Footer copy={config.footerText}/>
    </div>
  )
}


export async function getStaticProps({locale, defaultLocale}) {

  const clientConfig = { ...client.config(), token: process.env.SANITY_TOKEN }
  client.config(clientConfig)

  const config = await client.fetch(
    groq`
      *[_type == "site-config"][0]{
        "logo": logo.asset->url,
        title,
        url,
        footerText
      }
    `
  )

  const data = await client.fetch(
    groq`
      *[_type == "page" && __i18n_lang == "${locale}"][0]{
        hero,
        content,
        navigation
      }
    `
  )

  const translations = {
    en:{
      contactForm:{
        labels:{
          name: 'Name',
          email: 'Email',
          subject: 'Subject',
          message: 'Message'
        },
        buttons:{
          submit: "Send Message"
        }
      }
    },
    fr:{
      contactForm:{
        labels:{
          name: 'Nom',
          email: 'Email',
          subject: 'Suject',
          message: 'Message'
        },
        buttons:{
          submit: "Envoyer Message"
        }
      } 
    }
  }

  return { props: {
    hero: data.hero,
    sections: data.content ? data.content : [],
    navigation: data.navigation ? data.navigation : [],
    config,
    translation: translations[locale]
  }}
}